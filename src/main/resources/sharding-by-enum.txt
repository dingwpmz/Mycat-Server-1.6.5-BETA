/**
	 * 从SocketChannel中读取数据并写入到内部Buffer中,writeState里记录了写入的位置指针
	 * 第一次调用之前需要确保Buffer状态为Write状态，并指定要写入的位置，
	 * 
	 * @param channel
	 * @return 读取了多少数据
	 */
	public boolean readFromChannel(ProxyBuffer proxyBuf, SocketChannel channel) throws IOException {

		ByteBuffer buffer = proxyBuf.getBuffer();
		if(buffer.position()==proxyBuf.writeState.optLimit){
			proxyBuf.compact(true);
		}
		buffer.limit(proxyBuf.writeState.optLimit);
		buffer.position(proxyBuf.writeState.optPostion);
		int readed = channel.read(buffer);
		logger.debug(" readed {} total bytes ,channel {}", readed, channel);
		proxyBuf.writeState.curOptedLength = readed+proxyBuf.writeState.optPostion;
		if (readed > 0) {
			proxyBuf.writeState.optedTotalLength += readed+proxyBuf.writeState.optPostion;
			proxyBuf.writeState.optPostion += readed;
			proxyBuf.readState.optLimit = proxyBuf.writeState.optPostion;
		} else if (readed == -1) {
			logger.warn("Read EOF ,socket closed ");
			throw new ClosedChannelException();
		} else if (readed == 0) {
			logger.warn("readed zero bytes ,Maybe a bug ,please fix it !!!!");
		}
		return readed > 0;
	}

	/**
	 * 从内部Buffer数据写入到SocketChannel中发送出去，readState里记录了写到Socket中的数据指针位置 方法，
	 * 
	 * @param channel
	 */
	public void writeToChannel(ProxyBuffer proxyBuf, SocketChannel channel) throws IOException {
		ByteBuffer buffer = proxyBuf.getBuffer();
		BufferOptState readState = proxyBuf.readState;
		BufferOptState writeState = proxyBuf.writeState;
		buffer.position(readState.startPos);
		buffer.limit(readState.optPostion);
		int writed = channel.write(buffer);
		readState.curOptedLength = writed;
		readState.optedTotalLength += writed;
		if(buffer.hasRemaining()){
			buffer.compact();
			readState.startPos = 0;
			readState.optPostion = buffer.position();
			//处理半包
			writeState.optPostion = 0;
			writeState.optLimit = buffer.position();
			// 切换到写模式，继续从对端Socket读数据
			proxyBuf.setInReading(false);
		}else{
			buffer.limit(readState.optLimit);
			buffer.position(readState.optPostion);
			buffer.compact();
			// 数据彻底写完，切换为读模式，对端读取数据
			proxyBuf.changeOwner(!proxyBuf.frontUsing());
			// 数据彻底写完，切换为读模式
			proxyBuf.flip();
		}
		modifySelectKey();
	}